<brief>
    <meta>
        <version>1.0</version>
        <author>Project Manager</author>
        <target_agent>Claude</target_agent>
        <creation_date>2025-06-29</creation_date>
        <project>Ignitabull</project>
        <objective>Execute Phase 1 of the Ignitabull MVP development. This is the absolute priority. Do not deviate.</objective>
    </meta>

    <directives>
        <style_guide>
            - All code must be TypeScript.
            - Adhere strictly to the existing ESLint and Biome configurations.
            - All new functions and complex logic must be documented with JSDoc comments.
            - All code must be tested. Use Vitest for unit tests.
            - Follow the conventional commit specification for all commits.
        </style_guide>
        <critical_notice>
            The project's success hinges on a rapid, focused, and high-quality execution of the MVP. The current `mvp-checklist.md` is too broad and will lead to failure if pursued as written. We are replacing it with a phased, prioritized execution plan. Your focus is solely on the tasks I outline. Do not implement features beyond the scope of the current phase. We are building a foundation, not a cathedral.
        </critical_notice>
    </directives>

    <execution_plan>
        <phase id="1" name="Core Infrastructure &amp; Authentication">
            <objective>Establish the foundational database schema and a fully functional, secure authentication system. This is the bedrock of the entire application. It must be flawless.</objective>
            <tasks>
                <task id="1.1" name="Initialize Supabase Project">
                    <description>The `mvp-checklist` indicates this is not done. Your first task is to set up the Supabase project. I expect you to handle this by asking for the necessary credentials or guiding me through the setup process. Then, you will create the initial database schema.</description>
                    <acceptance_criteria>
                        - Supabase project is created and accessible.
                        - Environment variables (`.env.example` and `.env`) are populated with Supabase URL and keys.
                        - A script is created to initialize the database schema as defined in `technical-architecture.md`.
                    </acceptance_criteria>
                </task>
                <task id="1.2" name="Implement Database Schema">
                    <description>Using the `technical-architecture.md` as your guide, write and apply the SQL migrations for the initial database schema. Focus ONLY on the tables required for authentication and basic organization management.</description>
                    <scope>
                        - `organizations` table.
                        - `profiles` table.
                        - Row Level Security policies for both.
                    </scope>
                    <acceptance_criteria>
                        - SQL migration files are created in the `supabase/migrations` directory.
                        - The schema is successfully applied to the local development database.
                        - RLS policies are in place and tested.
                    </acceptance_criteria>
                </task>
                <task id="1.3" name="Implement Authentication System">
                    <description>Build the complete authentication flow using Supabase Auth. This includes user registration, login, and session management within the Next.js web application.</description>
                    <scope>
                        - Sign-up page and API endpoint.
                        - Sign-in page and API endpoint.
                        - Password reset flow.
                        - Middleware for protecting routes.
                        - A simple user profile page to display authenticated user data.
                    </scope>
                    <acceptance_criteria>
                        - Users can create an account and an associated organization.
                        - Users can log in and out.
                        - Authenticated users have a persistent session.
                        - Unauthenticated users are redirected from protected routes.
                        - All authentication logic is handled in the `apps/web` package.
                    </acceptance_criteria>
                </task>
            </tasks>
            <validation>
                <instruction>Upon completion of this phase, you will provide me with a summary of the work, including paths to the key files you created or modified. I will then review the implementation for quality, security, and adherence to the plan. Any deviations will be noted and must be corrected before proceeding.</instruction>
            </validation>
        </phase>
    </execution_plan>
</brief>
