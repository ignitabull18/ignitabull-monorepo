# Release Pipeline
name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.CHANGELOG }}

            ## Docker Images
            - Web: `ghcr.io/${{ github.repository }}/web:${{ github.ref_name }}`
            - Server: `ghcr.io/${{ github.repository }}/server:${{ github.ref_name }}`
            - Marketing: `ghcr.io/${{ github.repository }}/marketing:${{ github.ref_name }}`

            ## Deployment
            ```bash
            # Pull and run the release
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            ```
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # Job 2: Build and Test Release
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    timeout-minutes: 45

    strategy:
      matrix:
        app: [web, server, marketing]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test
        env:
          NODE_ENV: test

      - name: Build application
        run: npm run build -- --filter=${{ matrix.app }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.app }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.app }}:${{ steps.version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}/${{ matrix.app }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Security Scan Release
  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [build-release]

    strategy:
      matrix:
        app: [web, server, marketing]

    steps:
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}/${{ matrix.app }}:${{ steps.version.outputs.VERSION }}
          format: sarif
          output: trivy-results-${{ matrix.app }}.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results-${{ matrix.app }}.sarif

  # Job 4: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-release, security-scan]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ steps.version.outputs.VERSION }} to production..."
          # Add your production deployment commands here
          # For example:
          # - Update Kubernetes manifests with new image tags
          # - Apply kubectl commands
          # - Update docker-compose files and restart services
          # - Run database migrations if needed

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 60

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add comprehensive health check commands here
          # curl -f https://api.ignitabull.com/health
          # curl -f https://app.ignitabull.com/health
          # curl -f https://ignitabull.com/health

      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add smoke test commands here

  # Job 5: Notify Stakeholders
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-production.result }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ðŸš€ Release ${{ steps.version.outputs.VERSION }} deployment ${{ needs.deploy-production.result }}!
            
            ðŸ“¦ Docker Images:
            - Web: `ghcr.io/${{ github.repository }}/web:${{ steps.version.outputs.VERSION }}`
            - Server: `ghcr.io/${{ github.repository }}/server:${{ steps.version.outputs.VERSION }}`
            - Marketing: `ghcr.io/${{ github.repository }}/marketing:${{ steps.version.outputs.VERSION }}`

      - name: Notify Email
        if: needs.deploy-production.result == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ðŸš¨ Production Deployment Failed - ${{ steps.version.outputs.VERSION }}"
          body: |
            Production deployment for version ${{ steps.version.outputs.VERSION }} has failed.
            
            Please check the GitHub Actions logs and take immediate action.
            
            Deployment URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.ALERT_EMAIL }}
          from: GitHub Actions <noreply@ignitabull.com>

  # Job 6: Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get previous version
        id: previous
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "PREVIOUS_VERSION=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Rollback to previous version
        if: steps.previous.outputs.PREVIOUS_VERSION != ''
        run: |
          echo "Rolling back to previous version: ${{ steps.previous.outputs.PREVIOUS_VERSION }}"
          # Add rollback commands here
          # For example:
          # - Revert to previous Docker images
          # - Rollback database migrations if needed
          # - Update load balancer configuration

      - name: Verify rollback
        if: steps.previous.outputs.PREVIOUS_VERSION != ''
        run: |
          echo "Verifying rollback..."
          # Add rollback verification commands here

      - name: Notify rollback
        if: steps.previous.outputs.PREVIOUS_VERSION != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "ðŸ”„ Automatic rollback completed",
              "attachments": [
                {
                  "color": "warning",
                  "fields": [
                    {
                      "title": "Rolled back to",
                      "value": "${{ steps.previous.outputs.PREVIOUS_VERSION }}",
                      "short": true
                    },
                    {
                      "title": "Failed version",
                      "value": "${GITHUB_REF#refs/tags/}",
                      "short": true
                    }
                  ]
                }
              ]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}