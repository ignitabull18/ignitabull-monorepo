# Continuous Integration Pipeline
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Lint code
        run: bun run check

      - name: Type check
        run: bun run check-types

  # Job 2: Unit Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ignitabull_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ignitabull_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  # Job 3: Build Applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint-and-typecheck, test]

    strategy:
      matrix:
        app: [web, server, marketing]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build ${{ matrix.app }}
        run: bun run build -- --filter=${{ matrix.app }}

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            apps/${{ matrix.app }}/.next
            apps/${{ matrix.app }}/dist
          key: ${{ runner.os }}-${{ matrix.app }}-build-${{ github.sha }}

  # Job 4: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "üîç Running security audit for dependency vulnerabilities..."
          # Bun doesn't have audit command yet, use npm audit on lockfile
          npx npm@latest audit --audit-level high
          
          # Generate audit report
          npx npm@latest audit --json > audit-report.json || true
          
          # Check for critical/high vulnerabilities
          CRITICAL=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "‚ùå Critical or high severity vulnerabilities found"
            exit 1
          else
            echo "‚úÖ No critical or high severity vulnerabilities found"
          fi

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=all
          
      - name: Upload Snyk report
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: Notify security scan failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            üö® SECURITY ALERT: Vulnerability scan failed!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Critical or high-severity vulnerabilities detected.
            Deployment has been blocked until vulnerabilities are resolved.
            
            Please review the security scan results and fix vulnerabilities before proceeding.

  # Job 5: Docker Build and Push
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    strategy:
      matrix:
        app: [web, server, marketing]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.app }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Fail the job on critical/high vulnerabilities

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype
        with:
          image: ${{ steps.meta.outputs.tags }}
          fail-build: true
          severity-cutoff: high
          
      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}

      - name: Notify container security failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            üö® CONTAINER SECURITY ALERT: Vulnerability scan failed!
            
            Application: ${{ matrix.app }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Critical or high-severity vulnerabilities detected in container image.
            Deployment has been blocked until vulnerabilities are resolved.
            
            Please review the container scan results and rebuild with patched base images.

  # Job 6: E2E Tests (Optional)
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright
        run: bunx playwright install --with-deps

      - name: Run E2E tests
        run: bun run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

      - name: Stop services
        if: always()
        run: docker-compose down

  # Job 7: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [docker, security]
    # Only deploy if security scan passes
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Validate environment variables
        run: |
          bun install -g tsx zod
          bun scripts/validate-env.ts --ci
        env:
          NODE_ENV: staging
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NEO4J_URI: ${{ secrets.STAGING_NEO4J_URI }}
          NEO4J_USERNAME: ${{ secrets.STAGING_NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.STAGING_NEO4J_PASSWORD }}
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

      - name: Configure kubectl for staging
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > ~/.kube/config
          kubectl config use-context staging

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          
          # Update image tags with latest commit SHA
          sed -i "s|:latest|:${{ github.sha }}|g" k8s/*.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/
          
          # Wait for rollout to complete
          kubectl rollout status deployment/ignitabull-web -n ignitabull --timeout=300s
          kubectl rollout status deployment/ignitabull-server -n ignitabull --timeout=300s
          
          echo "‚úÖ Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests against staging..."
          
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=ignitabull-web -n ignitabull --timeout=120s
          kubectl wait --for=condition=ready pod -l app=ignitabull-server -n ignitabull --timeout=120s
          
          # Get service URLs
          WEB_URL=$(kubectl get ingress ignitabull-ingress -n ignitabull -o jsonpath='{.spec.rules[0].host}')
          API_URL=$(kubectl get ingress ignitabull-ingress -n ignitabull -o jsonpath='{.spec.rules[1].host}')
          
          # Basic health checks
          curl -f "https://$API_URL/api/health" || exit 1
          curl -f "https://$WEB_URL/api/health" || exit 1
          
          echo "‚úÖ Smoke tests passed"

  # Job 8: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Validate environment variables
        run: |
          bun install -g tsx zod
          bun scripts/validate-env.ts --ci
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          NEO4J_URI: ${{ secrets.PRODUCTION_NEO4J_URI }}
          NEO4J_USERNAME: ${{ secrets.PRODUCTION_NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.PRODUCTION_NEO4J_PASSWORD }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_SERVICE_ROLE_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          AMAZON_SP_CLIENT_ID: ${{ secrets.AMAZON_SP_CLIENT_ID }}
          AMAZON_SP_CLIENT_SECRET: ${{ secrets.AMAZON_SP_CLIENT_SECRET }}
          AMAZON_SP_REFRESH_TOKEN: ${{ secrets.AMAZON_SP_REFRESH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Configure kubectl for production
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > ~/.kube/config
          kubectl config use-context production

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          
          # Update image tags with latest commit SHA
          sed -i "s|:latest|:${{ github.sha }}|g" k8s/*.yaml
          
          # Apply Kubernetes manifests with production settings
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/
          
          # Wait for rollout to complete with longer timeout for production
          kubectl rollout status deployment/ignitabull-web -n ignitabull --timeout=600s
          kubectl rollout status deployment/ignitabull-server -n ignitabull --timeout=600s
          
          echo "‚úÖ Production deployment completed"

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run health checks
        run: |
          echo "üè• Running production health checks..."
          
          # Wait for services to be fully ready
          kubectl wait --for=condition=ready pod -l app=ignitabull-web -n ignitabull --timeout=300s
          kubectl wait --for=condition=ready pod -l app=ignitabull-server -n ignitabull --timeout=300s
          
          # Comprehensive health checks
          API_URL="https://api.ignitabull.com"
          WEB_URL="https://app.ignitabull.com"
          MARKETING_URL="https://ignitabull.com"
          
          # API health check
          curl -f "$API_URL/api/health" || exit 1
          
          # Web app health check
          curl -f "$WEB_URL/api/health" || exit 1
          
          # Marketing site health check
          curl -f "$MARKETING_URL/health" || exit 1
          
          # Database connectivity check via API
          curl -f "$API_URL/api/health" -H "Content-Type: application/json" | jq -e '.services[] | select(.name=="database") | .status == "healthy"' || exit 1
          
          echo "‚úÖ All production health checks passed"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "üí• Deployment failed, initiating rollback..."
          kubectl rollout undo deployment/ignitabull-web -n ignitabull
          kubectl rollout undo deployment/ignitabull-server -n ignitabull
          
          # Wait for rollback to complete
          kubectl rollout status deployment/ignitabull-web -n ignitabull --timeout=300s
          kubectl rollout status deployment/ignitabull-server -n ignitabull --timeout=300s
          
          echo "üîÑ Rollback completed"

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()