# Multi-stage Docker build for Server App
# Optimized for production deployment

# Stage 1: Dependencies
FROM node:18-alpine AS deps
WORKDIR /app

# Install dependencies
RUN apk add --no-cache libc6-compat
COPY package.json package-lock.json* ./
COPY apps/server/package.json ./apps/server/
COPY packages/*/package.json ./packages/*/
RUN npm ci --only=production

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build packages first
RUN npm run build -- --filter=@ignitabull/core
RUN npm run build -- --filter=@ignitabull/config
RUN npm run build -- --filter=@ignitabull/amazon-core

# Build the server application
RUN npm run build -- --filter=server

# Stage 3: Runner
FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production

# Install curl for health checks
RUN apk add --no-cache curl

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 serverjs

# Copy built application and dependencies
COPY --from=builder --chown=serverjs:nodejs /app/apps/server/.next ./apps/server/.next
COPY --from=builder --chown=serverjs:nodejs /app/apps/server/public ./apps/server/public
COPY --from=builder --chown=serverjs:nodejs /app/apps/server/package.json ./apps/server/
COPY --from=builder --chown=serverjs:nodejs /app/packages ./packages
COPY --from=deps --chown=serverjs:nodejs /app/node_modules ./node_modules

USER serverjs

EXPOSE 3001

ENV PORT=3001
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3001/api/health || exit 1

CMD ["npm", "run", "start", "--workspace=server"]